#!/usr/bin/env bash
#
# update-all
# v.1.6
# (c) Anton 'KodopiK' Konoplev, 2017-2023
# kodopik@kodopik.ru
#
# What this script actually does:
#
# apt update \
#     && apt list --upgradable \
#     && apt full-upgrade [-y] \
#     && apt autoremove [-y] \
#     && apt autoclean

set -eo pipefail

source /etc/lsb-release || ( \
    echo 'Cannot import LSB variables' >&2
    exit 1
)

declare -a LSB_ARRAY=( 'Ubuntu' 'LinuxMint' )

function join_by {
    # Â© Nicholas Sushkin
    local d=${1-} f=${2-}
    if shift 2; then
        printf %s "$f" "${@/#/$d}"
    fi
}

if [[ ! "${LSB_ARRAY[*]}" =~ "$DISTRIB_ID" ]]; then
    echo "Sorry, \""`join_by ", " ${LSB_ARRAY[*]}`"\" only" >&2
    exit 2
fi

declare -ri UBUNTU_RELEASE=${DISTRIB_RELEASE%%.*}

apt_command='apt'
list_param=''
upgrade_param='full'

# Use `apt-get dist-upgrade' instead of `apt full-upgrade' on older releases:
if [[ $UBUNTU_RELEASE -lt 16 ]]; then
    apt_command='apt-get'
    list_param='-s'
    upgrade_param='dist'
fi

params='-y'

declare -r APP_NAME=`basename $0`
declare -r USAGE_MESS="Usage: $APP_NAME [OPTIONS]"
declare -r ERR_MESS=`cat << EOF
${USAGE_MESS}

${APP_NAME}: error: no such option: ${1}
EOF
`

function print_help {
    echo $USAGE_MESS
    cat << EOF

Options:
    -i          Run interactively (ask for upgrade and remove)
    -h, --help  Print this message
EOF
}

if [[ -n "$1" ]]; then
    case "$1" in
        -i) params='';;
        -h|--help) print_help
            exit 0;;
        *) echo "$ERR_MESS" >&2
            exit 3;;
    esac
fi

if [[ $UID != 0 ]]; then
    printf "Please run this script with sudo:\nsudo %s %s\n" "$APP_NAME" "$*" >&2
    exit 4
fi

function print_message {
    MESSAGE="$1"
    printf '\n**** %s: ****\n\n' "${MESSAGE}"
}

function update {
    print_message 'UPDATING'
    $apt_command ${update_param} update
}

function list {
    print_message 'UPGRADABLE SOFTWARE'
    if [[ $UBUNTU_RELEASE -lt 16 ]]; then
        $apt_command ${list_param} ${upgrade_param}-upgrade
    else
        $apt_command list --upgradable
    fi
}

function upgrade {
    print_message 'UPGRADING'
    $apt_command ${upgrade_param}-upgrade $params
}

function remove {
    print_message 'REMOVING OBSOLETE SOFTWARE'
    $apt_command autoremove $params
}

function clean {
    print_message 'CLEANING SYSTEM'
    $apt_command autoclean
}

function main {
    update  && \
    list    && \
    upgrade && \
    remove  && \
    clean
}

main

exit 0
