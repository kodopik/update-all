#!/usr/bin/env bash
#
# update-all
# v.1.8
# (c) Anton 'KodopiK' Konoplev, 2017-2025
# kodopik@kodopik.ru
#
# What the script does:
#   apt update \
#       && apt list --upgradable \
#       && apt full-upgrade [-y] \
#       && apt autoremove [-y] \
#       && apt autoclean

set -eo pipefail

# --- Determine OS and version using /etc/os-release only ---
if [[ -r /etc/os-release && -s /etc/os-release ]]; then
    source /etc/os-release
    OS_ID="$ID"
    OS_RELEASE="$VERSION_ID"
else
    echo 'Cannot detect OS: /etc/os-release not found or empty' >&2
    exit 1
fi

# Supported distributions
declare -a SUPPORTED=( 'ubuntu' 'linuxmint' 'debian' )

# Check if OS_ID is in the supported list
if ! [[ " ${SUPPORTED[*]} " =~ " ${OS_ID,,} " ]]; then
    echo "Sorry, supported only: ${SUPPORTED[*]^}" >&2
    exit 2
fi

MAJOR_RELEASE=${OS_RELEASE%%.*}

# For older Ubuntu (<16) use apt-get dist-upgrade
apt_command='apt'
list_param=''
upgrade_param='full'
if [[ "${OS_ID,,}" == "ubuntu" && "$MAJOR_RELEASE" -lt 16 ]]; then
    apt_command='apt-get'
    list_param='-s'
    upgrade_param='dist'
fi

params='-y'
APP_NAME="$(basename "$0")"
USAGE="Usage: $APP_NAME [OPTIONS]"

function print_help {
    echo "$USAGE"
    cat << EOF

Options:
    -i          Run interactively (ask for upgrade and remove)
    -h, --help  Print this message
EOF
}

# Parse arguments
if [[ -n "$1" ]]; then
    case "$1" in
        -i) params='';;
        -h|--help) print_help; exit 0;;
        *) echo "$APP_NAME: error: no such option: $1" >&2; exit 3;;
    esac
fi

# Check for privileges
if [[ $UID -ne 0 ]]; then
    echo "Please run as root: sudo $APP_NAME $*" >&2
    exit 4
fi

function print_message {
    printf '\n**** %s ****\n\n' "$1"
}

function update {
    print_message 'UPDATING'
    $apt_command update
}

function list_upgradable {
    print_message 'UPGRADABLE SOFTWARE'
    if [[ "${OS_ID,,}" == "ubuntu" && "$MAJOR_RELEASE" -lt 16 ]]; then
        $apt_command $list_param ${upgrade_param}-upgrade
    else
        $apt_command list --upgradable
    fi
}

function upgrade {
    print_message 'UPGRADING'
    $apt_command ${upgrade_param}-upgrade $params
}

function remove {
    print_message 'REMOVING OBSOLETE SOFTWARE'
    $apt_command autoremove $params
}

function clean {
    print_message 'CLEANING SYSTEM'
    $apt_command autoclean
}

function main {
    update && list_upgradable && upgrade && remove && clean
}

main
exit 0

